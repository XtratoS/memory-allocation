{"version":3,"sources":["components/ModifySegmentForm.js","components/ModifyProcessColumn.js","helpers/constants.js","components/SortedSegmentView.js","core/segment.js","components/SortedProcessesView.js","components/InsertedDataView.js","components/Main.js","components/App.js","index.js"],"names":["Segment","props","useState","segment","name","setName","size","setSize","useEffect","className","htmlFor","id","type","value","onChange","event","target","min","onClick","setSegment","parseInt","removeSelf","ModifyProcessColumn","process","tempProcessName","setTempProcessName","setSegments","newSegments","newProcess","segments","updateProcess","addProcess","disabled","holeCount","removeProcess","processCount","map","index","newSegment","splice","FIRST_FIT","BEST_FIT","WORST_FIT","OLD_PROCESS","HOLE","NEW_PROCESS","SortedSegment","style","position","top","start","width","height","display","alignItems","justifyContent","fontWeight","text","segmentProcessesAndHoles","memorySize","processes","holes","sortingMethod","holeSegments","oldProcesses","result","forEach","processIndex","push","hole","end","sort","a","b","i","length","previousSegment","firstSegment","lastSegment","processAllocationResult","segmentAllocationResult","updatedHoles","JSON","parse","stringify","updatedSegments","j","segmentSize","k","holeSize","bestFitSegmentIndex","bestFitHole","bestFitHoleSize","worstFitSegmentIndex","worstFitHole","worstFitHoleSize","console","log","factor","s","SortedProcesses","maxHeight","useRef","selectedOption","setSelectedOption","current","allocationResult","alert","options","label","placeholder","ShowProcesses","listHoles","setListHoles","listProcesses","setListProcesses","cursor","selectedProcessIndex","selectProcess","Main","memorySizeInputValue","setMemorySizeInputValue","setMemorySize","holeStartAddress","setHoleStartAddress","setHoleSize","setHoles","setProcesses","currentProcessIndex","setCurrentProcessIndex","autoFocusCallbackRef","useCallback","inputElement","focus","submitMemorySize","parsedMemorySize","isNaN","ref","onKeyUp","key","preventDefault","parsedHoleStart","parsedHoleSize","overlap","_holeStart","_holeSize","newHoles","newProcesses","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c55a424d.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport default function Segment(props) {\n  const [name, setName] = useState(props.segment.name);\n  const [size, setSize] = useState(props.segment.size);\n\n  useEffect(() => {\n    setName(props.segment.name);\n    setSize(props.segment.size);\n  }, [props.segment]);\n\n  return (<>\n    <div className=\"input-group row m-auto mt-3\">\n      <div className=\"col\">\n        <label\n          className=\"form-label mb-0\"\n          htmlFor=\"segment-name\"\n        >\n          Name\n        </label>\n        <input\n          id=\"segment-name\"\n          className=\"form-control\"\n          type=\"text\"\n          value={name}\n          onChange={(event) => {setName(event.target.value)}}\n        />\n      </div>\n      <div className=\"col\">\n        <label\n          className=\"form-label mb-0\"\n          htmlFor=\"segment-size\"\n        >\n          Size\n        </label>\n        <input\n          id=\"segment-size\"\n          className=\"form-control\"\n          type=\"number\"\n          min={1}\n          value={size}\n          onChange={(event) => {setSize(event.target.value)}}\n        />\n      </div>\n    </div>\n    <div className=\"row m-auto p-0\">\n      <div className=\"col input-group justify-content-between\">\n        <button\n          className=\"mt-1 btn btn-success w-80\"\n          onClick={() => {\n            props.setSegment({\n              name,\n              size: parseInt(size)\n            })}}\n        >\n          Save Segment\n        </button>\n        <button\n          className=\"mt-1 btn btn-danger w-20\"\n          onClick={props.removeSelf}\n        >\n          <i className=\"fas fa-trash-alt\"></i>\n        </button>\n      </div>\n    </div>\n  </>)\n}","import React, { useEffect, useState } from 'react';\nimport ModifySegmentForm from './ModifySegmentForm';\n\nexport default function ModifyProcessColumn(props) {\n\n  const [tempProcessName, setTempProcessName] = useState(props.process.name);\n\n  useEffect(() => {}, [props.process]);\n\n  useEffect(() => {\n    setTempProcessName(props.process.name);\n  }, [props.process]);\n\n  const submitProcess = () => {\n    let newProcess = {\n      name: tempProcessName,\n      segments: [...props.process.segments]\n    };\n    props.updateProcess(newProcess);\n  }\n\n  const addNewSegment = () => {\n    let newProcess = {\n      name: tempProcessName,\n      segments: [...props.process.segments, {name: '', size: 0}]\n    };\n    props.updateProcess(newProcess);\n  }\n\n  const setSegments = (newSegments) => {\n    let newProcess = {\n      name: tempProcessName,\n      segments: [...newSegments]\n    };\n    props.updateProcess(newProcess);\n  }\n\n  return (<>\n    <div className=\"h3\">Insert/Modify Process</div>\n    <div className=\"my-4\">\n      <div>\n      <button className=\"mb-3 mx-1 btn btn-primary\" onClick={() => {\n        props.addProcess();\n        // setTempProcessName(props.process.name);\n      }} disabled={props.holeCount < 1}>Add Process</button>\n        <button className=\"mb-3 mx-1 btn btn-danger\" onClick={() => {\n          props.removeProcess();\n          // setTempProcessName(props.process.name);\n        }} disabled={props.processCount <= 1}>Remove Process</button>\n      </div>\n      <label\n        className=\"form-label\"\n        htmlFor=\"process-name\"\n      >\n        Process Name\n      </label>\n      <div className=\"input-group\">\n        <input\n          id=\"process-name\"\n          className=\"form-control\"\n          type=\"text\"\n          value={tempProcessName}\n          onChange={(event) => {setTempProcessName(event.target.value)}}\n          disabled={props.holeCount === 0}\n        />\n        <button\n          className=\"btn btn-success\"\n          onClick={submitProcess}\n          disabled={props.holeCount === 0}\n        >\n          Save\n        </button>\n      </div>\n    </div>\n    <div className=\"mt-4\">\n      <button\n        className=\"btn btn-primary\"\n        onClick={addNewSegment}\n        disabled={props.holeCount === 0}\n      >\n        Add Segment\n      </button>\n    </div>\n    {props.process.segments.map((segment, index) => (<ModifySegmentForm\n      key={index}\n      index={index}\n      segment={segment}\n      setSegment={(newSegment) => {\n        let newSegments = [...props.process.segments];\n        newSegments[index] = newSegment;\n        setSegments(newSegments);\n      }}\n      removeSelf={() => {\n        let newSegments = props.process.segments;\n        newSegments.splice(index, 1);\n        setSegments(newSegments);\n      }}\n    />))}\n  </>)\n}","export const FIRST_FIT = 'FIRST_FIT';\nexport const BEST_FIT = 'BEST_FIT';\nexport const WORST_FIT = 'WORST_FIT';\n\nexport const OLD_PROCESS = 'OLD_PROCESS';\nexport const HOLE = 'HOLE';\nexport const NEW_PROCESS = 'NEW_PROCESS';","import React, { useEffect } from 'react';\nimport {\n  OLD_PROCESS,\n  HOLE,\n  NEW_PROCESS\n} from '../helpers/constants';\n\nexport default function SortedSegment(props) {\n  useEffect(() => {\n    // console.log('props', props);\n  }, []);\n\n  return (\n    <div className={\n        (props.type === OLD_PROCESS && \"bg-warning\") ||\n        (props.type === HOLE && \"bg-success\") ||\n        (props.type === NEW_PROCESS && \"bg-primary\")\n      } style={{\n        position: 'absolute',\n        top: `${props.start}px`,\n        width: '100%',\n        height: `${props.size}px`,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontWeight: 'bold',\n      }}>\n        {props.text}\n    </div>\n  )\n}","import {\n  FIRST_FIT,\n  BEST_FIT,\n  WORST_FIT,\n  OLD_PROCESS,\n  HOLE,\n  NEW_PROCESS,\n} from '../helpers/constants';\n\nconst segmentProcessesAndHoles = (memorySize, height, processes, holes, sortingMethod) => {\n  let segments = [];\n  let holeSegments = [];\n  let oldProcesses = [];\n  let newSegments = [];\n  let result = [true, []];\n\n  // Create segments\n  processes.forEach((process, processIndex) => {\n    process.segments.forEach((segment) => {\n      segments.push({\n        processIndex: processIndex,\n        name: `${process.name} - ${segment.name}`,\n        size: segment.size\n      });\n    });\n  });\n\n  // Insert holes\n  holes.forEach((hole, index) => {\n    holeSegments.push({\n      type: HOLE,\n      name: `Hole ${index}`,\n      start: hole[0],\n      end: hole[0] + hole[1]\n    });\n  });\n  holeSegments.sort((a, b) => (a.start - b.start));\n\n  // Insert old processes between holes\n  for (let i = 1; i < holeSegments.length; i++) {\n    let previousSegment = holeSegments[i-1];\n    let segment = holeSegments[i];\n    if (segment.start > previousSegment.end) {\n      oldProcesses.push({\n        type: OLD_PROCESS,\n        name: 'Old Process',\n        start: previousSegment.end,\n        end: segment.start\n      });\n    }\n  }\n\n  // Insert old process to the start if first hole doesn't start at 0\n  let firstSegment = holeSegments[0];\n  if (firstSegment && firstSegment.start > 0) {\n    oldProcesses.push({\n      type: OLD_PROCESS,\n      name: 'Old Process',\n      start: 0,\n      end: firstSegment.start\n    });\n  }\n\n  // Add old process to the end if last hole doesn't end at memory size\n  let lastSegment = holeSegments[holeSegments.length - 1];\n  if (lastSegment && lastSegment.end < memorySize) {\n    oldProcesses.push({\n      type: OLD_PROCESS,\n      name: 'Old Process',\n      start: lastSegment.end,\n      end: memorySize\n    });\n  }\n\n  let useFirstFit = () => {\n    for (let i=0; i<processes.length; i++) {\n      let processAllocationResult = true;\n      let segmentAllocationResult = false;\n\n      let updatedHoles = JSON.parse(JSON.stringify(holeSegments));\n      let updatedSegments = JSON.parse(JSON.stringify(newSegments));\n      let process = processes[i];\n\n      for (let j=0; j<process.segments.length; j++) {\n        let segment = process.segments[j];\n        let segmentSize = segment.size;\n        for (let k=0; k<updatedHoles.length; k++) {\n          let hole = updatedHoles[k];\n          let holeSize = hole.end - hole.start;\n          if (segmentSize <= holeSize) {\n            updatedSegments.push({\n              type: NEW_PROCESS,\n              name: `${process.name} - ${segment.name}`,\n              start: hole.start,\n              end: hole.start + segmentSize\n            });\n            if (segmentSize === holeSize) {\n              updatedHoles.splice(k, 1);\n            } else {\n              updatedHoles[k].start += segmentSize;\n            }\n            segmentAllocationResult = true;\n            break;\n          }\n        }\n        if (segmentAllocationResult === false) {\n          processAllocationResult = false;\n          break;\n        }\n      }\n\n      if (processAllocationResult === true) {\n        holeSegments = JSON.parse(JSON.stringify(updatedHoles));\n        newSegments = JSON.parse(JSON.stringify(updatedSegments));\n      }\n    }\n  }\n\n  let useBestFit = () => {\n    for (let i=0; i<processes.length; i++) {\n      let processAllocationResult = true;\n      let segmentAllocationResult;\n\n      let updatedHoles = JSON.parse(JSON.stringify(holeSegments));\n      let updatedSegments = JSON.parse(JSON.stringify(newSegments));\n      let process = processes[i];\n\n      for (let j=0; j<process.segments.length; j++) {\n        segmentAllocationResult = false;\n        let segment = process.segments[j];\n        let segmentSize = segment.size;\n        let bestFitSegmentIndex = null;\n        for (let k=0; k<updatedHoles.length; k++) {\n          let hole = updatedHoles[k];\n          let holeSize = hole.end - hole.start;\n          if (segmentSize <= holeSize) {\n            if (bestFitSegmentIndex === null) {\n              bestFitSegmentIndex = k;\n              segmentAllocationResult = true;\n              continue;\n            }\n            let bestFitHole = updatedHoles[bestFitSegmentIndex];\n            let bestFitHoleSize = bestFitHole.end - bestFitHole.start;\n            if (holeSize < bestFitHoleSize) {\n              bestFitSegmentIndex = k;\n              segmentAllocationResult = true;\n              continue;\n            }\n          }\n        }\n\n        if (segmentAllocationResult === false) {\n          processAllocationResult = false;\n          break;\n        }\n        let bestFitHole = updatedHoles[bestFitSegmentIndex];\n        let bestFitHoleSize = bestFitHole.end - bestFitHole.start;\n        updatedSegments.push({\n          type: NEW_PROCESS,\n          name: `${process.name} - ${segment.name}`,\n          start: bestFitHole.start,\n          end: bestFitHole.start + segmentSize\n        });\n\n        if (bestFitHoleSize === segmentSize) {\n          updatedHoles.splice(bestFitSegmentIndex, 1);\n        } else if (bestFitHoleSize > segmentSize) {\n          updatedHoles[bestFitSegmentIndex].start += segmentSize;\n        }\n      }\n\n      if (processAllocationResult === true) {\n        holeSegments = JSON.parse(JSON.stringify(updatedHoles));\n        newSegments = JSON.parse(JSON.stringify(updatedSegments));\n      }\n    }\n  }\n\n  let useWorstFit = () => {\n    for (let i=0; i<processes.length; i++) {\n      let processAllocationResult = true;\n      let segmentAllocationResult;\n\n      let updatedHoles = JSON.parse(JSON.stringify(holeSegments));\n      let updatedSegments = JSON.parse(JSON.stringify(newSegments));\n      let process = processes[i];\n\n      for (let j=0; j<process.segments.length; j++) {\n        segmentAllocationResult = false;\n        let segment = process.segments[j];\n        let segmentSize = segment.size;\n        let worstFitSegmentIndex = null;\n        for (let k=0; k<updatedHoles.length; k++) {\n          let hole = updatedHoles[k];\n          let holeSize = hole.end - hole.start;\n          if (segmentSize <= holeSize) {\n            if (worstFitSegmentIndex === null) {\n              worstFitSegmentIndex = k;\n              segmentAllocationResult = true;\n              continue;\n            }\n            let worstFitHole = updatedHoles[worstFitSegmentIndex];\n            let worstFitHoleSize = worstFitHole.end - worstFitHole.start;\n            if (holeSize > worstFitHoleSize) {\n              worstFitSegmentIndex = k;\n              segmentAllocationResult = true;\n              continue;\n            }\n          }\n        }\n\n        if (segmentAllocationResult === false) {\n          processAllocationResult = false;\n          break;\n        }\n        let worstFitHole = updatedHoles[worstFitSegmentIndex];\n        let worstFitHoleSize = worstFitHole.end - worstFitHole.start;\n        updatedSegments.push({\n          type: NEW_PROCESS,\n          name: `${process.name} - ${segment.name}`,\n          start: worstFitHole.start,\n          end: worstFitHole.start + segmentSize\n        });\n\n        if (worstFitHoleSize === segmentSize) {\n          updatedHoles.splice(worstFitSegmentIndex, 1);\n        } else if (worstFitHoleSize > segmentSize) {\n          updatedHoles[worstFitSegmentIndex].start += segmentSize;\n        }\n      }\n\n      if (processAllocationResult === true) {\n        holeSegments = JSON.parse(JSON.stringify(updatedHoles));\n        newSegments = JSON.parse(JSON.stringify(updatedSegments));\n      }\n    }\n  }\n\n  let sortingFunctions = {\n    [FIRST_FIT]: useFirstFit,\n    [BEST_FIT]: useBestFit,\n    [WORST_FIT]: useWorstFit\n  }\n\n  sortingFunctions[sortingMethod]();\n\n  console.log(oldProcesses, holeSegments, newSegments);\n\n  let factor = height / memorySize;\n\n  result[1] = [...oldProcesses, ...holeSegments, ...newSegments].map(s => ({\n    ...s,\n    start: s.start * factor,\n    end: s.end * factor\n  }));\n\n  return result;\n}\n\nexport default segmentProcessesAndHoles;","import React, { useEffect, useState, useRef } from 'react';\nimport Select from 'react-select';\nimport SortedSegmentView from './SortedSegmentView';\nimport {\n  FIRST_FIT,\n  BEST_FIT,\n  WORST_FIT\n} from '../helpers/constants';\n\nimport segmentProcessesAndHoles from '../core/segment';\n\nexport default function SortedProcesses(props) {\n\n  const maxHeight = useRef(600);\n\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [segments, setSegments] = useState([]);\n\n  useEffect(() => {\n    if (selectedOption) {\n      const [allocationResult, newSegments] = segmentProcessesAndHoles(\n        props.memorySize,\n        maxHeight.current,\n        props.processes,\n        props.holes,\n        selectedOption.value\n      );\n      if (allocationResult === false) {\n        alert(`Failed to allocate processes to memory`);\n        return;\n      }\n      setSegments(newSegments);\n    }\n  }, [\n    selectedOption,\n    props.memorySize,\n    props.processes,\n    props.holes\n  ]);\n\n  useEffect(() => {\n    \n  }, [segments]);\n  \n  const handleChange = (selectedOption) => {\n    setSelectedOption(selectedOption);\n  };\n  \n  return (<>\n    <Select\n      value={selectedOption}\n      onChange={handleChange}\n      options={[\n        {value: FIRST_FIT, label: 'First Fit'},\n        {value: BEST_FIT, label: 'Best Fit'},\n        {value: WORST_FIT, label: 'Worst Fit'}\n      ]}\n      placeholder=\"Allocation Method...\"\n    />\n    <div className=\"bg-danger\" style={{\n      position: 'relative',\n      height: `${maxHeight.current}px`\n    }}>\n      {segments.map((segment, i) => (\n        <SortedSegmentView\n          key={i}\n          type={segment.type}\n          start={segment.start}\n          size={segment.end - segment.start}\n          text={segment.name}\n        />\n      ))}\n    </div>\n  </>)\n}","import React, { useState } from 'react';\nimport SortedProcessesView from './SortedProcessesView';\n\nexport default function ShowProcesses(props) {\n\n  const [listHoles, setListHoles] = useState(true);\n  const [listProcesses, setListProcesses] = useState(true);\n\n  let k = 0;\n  return (<>\n    <div\n      className=\"h6 mt-1\"\n    >\n      Holes <span\n        style={{ cursor: 'pointer' }}\n        onClick={() => {setListHoles(!listHoles)}}\n        className=\"link-primary\"\n      >\n        {(listHoles && '[hide]') || '[show]'}\n      </span>\n    </div>\n    {listHoles && props.holes.map((hole, index) => (<div key={k++} className=\"border border-1 rounded border-secondary\">\n      <div className=\"row m-0 p-0\">\n        <div className=\"col\">\n          Hole {index}\n        </div>\n      </div>\n      <div className=\"row m-0 p-0 border-top border-1 border-secondary\">\n        <div className=\"col\">\n          Start: {hole[0]}\n        </div>\n        <div className=\"col\">\n          Size: {hole[1]}\n        </div>\n      </div>\n    </div>))}\n    <div\n      className=\"h6 mt-2\"\n    >\n      Processes <span\n        style={{ cursor: 'pointer' }}\n        onClick={() => {setListProcesses(!listProcesses)}}\n        className=\"link-primary\"\n      >\n        {(listProcesses && '[hide]') || '[show]'}\n      </span>\n    </div>\n    {listProcesses && props.processes.map((process, index) => (<div\n      key={k++}\n      className={`border border-1 rounded border-secondary ${props.selectedProcessIndex === index && 'bg-warning'}`}\n      onClick={() => {props.selectProcess(index)}}\n      style={{cursor: 'pointer'}}\n    >\n      <div className=\"row m-0 p-0\">\n        <div className=\"col\">\n          {process.name || <div className=\"fs-italic\">Unnamed Process</div>}\n        </div>\n      </div>\n      <div className=\"row m-0 p-0 border-top border-1 border-secondary\">\n        <div className=\"col\">\n          # Segments: {process.segments.length}\n        </div>\n      </div>\n    </div>))}\n\n    <SortedProcessesView\n      memorySize={props.memorySize}\n      processes={props.processes}\n      holes={props.holes}\n    />\n  </>)\n}\n\n\n","import React, { useEffect, useState, useCallback } from 'react';\nimport ModifyProcessColumn from './ModifyProcessColumn';\nimport InsertedDataView from './InsertedDataView';\n\nexport default function Main() {\n  \n  const [memorySizeInputValue, setMemorySizeInputValue] = useState('2');\n  const [memorySize, setMemorySize] = useState(0);\n\n  const [holeStartAddress, setHoleStartAddress] = useState('0');\n  const [holeSize, setHoleSize] = useState('1');\n\n  const [holes, setHoles] = useState([]);\n  const [processes, setProcesses] = useState([{name: '', segments: []}]);\n  const [currentProcessIndex, setCurrentProcessIndex] = useState(0);\n\n  const autoFocusCallbackRef = useCallback(inputElement => {\n    if (inputElement) inputElement.focus();\n  }, []);\n\n  // const startingAddressCallbackRef = useCallback(inputElement => {\n  //   if (inputElement) inputElement.focus();\n  // }, []);\n\n  useEffect(() => {\n    // console.log(holes);\n  }, [holes]);\n  \n  const submitMemorySize = () => {\n    let parsedMemorySize = parseInt(memorySizeInputValue);\n    if (!isNaN(parsedMemorySize)) {\n      setMemorySize(parsedMemorySize);\n    }\n  }\n\n  const submitHole = () => {\n    let parsedHoleStart = parseInt(holeStartAddress);\n    let parsedHoleSize = parseInt(holeSize);\n\n    if (isNaN(parsedHoleStart) || isNaN(parsedHoleSize)) {\n      alert(`You must insert a valid hole parameters`);\n      return false;\n    }\n\n    if (parsedHoleStart + parsedHoleSize > memorySize) {\n      alert(`A hole can't extend outside memory`);\n      return false;\n    }\n\n    let overlap = null;\n    holes.forEach(([_holeStart, _holeSize]) => {\n      let _holeEnd = _holeStart + _holeSize;\n      let holeEnd = parsedHoleStart + parsedHoleSize;\n      if (parsedHoleStart <= _holeStart && holeEnd >= _holeStart) {\n        overlap = [_holeStart, _holeSize];\n      }\n      if (parsedHoleStart >= _holeStart && parsedHoleStart < _holeEnd) {\n        overlap = [_holeStart, _holeSize];\n      }\n    });\n    if (overlap != null) {\n      alert(`Hole overlaps with hole starting at ${overlap[0]} with size ${overlap[1]}`);\n      return false;\n    }\n\n    let hole = [parsedHoleStart, parsedHoleSize];\n    // add the new hole to the holes array\n    let newHoles = [...holes, hole];\n    setHoles(newHoles);\n    // empty the textboxes\n    setHoleStartAddress('');\n    setHoleSize('');\n  }\n\n  const updateCurrentProcess = (newProcess) => {\n    let newProcesses = [...processes];\n    newProcesses[currentProcessIndex] = newProcess;\n    setProcesses(newProcesses);\n  }\n\n  const removeProcess = () => {\n    let newProcesses = [...processes];\n    newProcesses.splice(currentProcessIndex, 1);\n    setProcesses(newProcesses);\n  }\n\n  const addProcess = () => {\n    let newProcesses = [...processes, {name: '', segments: []}];\n    setCurrentProcessIndex(processes.length);\n    setProcesses(newProcesses);\n  }\n\n  useEffect(() => {\n    if (currentProcessIndex >= processes.length) {\n      setCurrentProcessIndex(processes.length - 1);\n    } else if (currentProcessIndex < 0) {\n      setCurrentProcessIndex(0);\n    }\n  }, [processes, currentProcessIndex]);\n\n  if (memorySize === 0) {\n    return (\n      <div className=\"m-4\">\n        <label htmlFor=\"memorySizeInput\" className=\"form-label mb-4 mw-80px\">Memory Size (in bytes)</label>\n        <input\n          id=\"memorySizeInput\"\n          className=\"form-control m-auto mb-4 mw-80px w-60\"\n          type=\"number\" \n          ref={autoFocusCallbackRef}\n          value={memorySizeInputValue}\n          onChange={(event) => {setMemorySizeInputValue(event.target.value)}}\n          onKeyUp={(event) => {\n            if (event.key === 'Enter') {\n              event.preventDefault();\n              submitMemorySize();\n            }\n          }}\n        />\n        <button className=\"btn btn-success\" onClick={submitMemorySize}>\n          Submit\n        </button>\n      </div>\n    )\n  }\n\n  return (\n    <>\n      <div className=\"row m-0 text-center justify-content-center\">\n        <div className=\"mt-4 col-6 col-md-4\">\n          <div className=\"h3\">Insert Hole</div>\n          <div className=\"my-4\">\n            <label\n              className=\"form-label\"\n              htmlFor=\"holeStart\"\n            >\n              Starting Address\n            </label>\n            <input\n              id=\"holeStart\"\n              className=\"form-control\"\n              type=\"number\"\n              min={0}\n              value={holeStartAddress}\n              ref={autoFocusCallbackRef}\n              onChange={(event) => {\n                if (parseInt(event.target.value) < 0) return false;\n                setHoleStartAddress(event.target.value)\n              }}\n            />\n          </div>\n          <div className=\"mb-4\">\n            <label\n              className=\"form-label\"\n              htmlFor=\"holeSize\"\n            >\n              Size\n            </label>\n            <input\n              id=\"holeSize\"\n              className=\"form-control\"\n              type=\"number\"\n              min={1}\n              value={holeSize}\n              onChange={(event) => {\n                if (parseInt(event.target.value) < 1) return false;\n                setHoleSize(event.target.value)\n              }}\n            />\n          </div>\n          <button\n            className=\"btn btn-primary\"\n            onClick={submitHole}\n          >\n            Insert Hole\n          </button>\n        </div>\n        <div className=\"mt-4 col-6 col-md-4\">\n          <ModifyProcessColumn\n            process={(processes[currentProcessIndex] && processes[currentProcessIndex]) || {name: '', segments: []}}\n            addProcess={addProcess}\n            removeProcess={removeProcess}\n            updateProcess={updateCurrentProcess}\n            holeCount={holes.length}\n            processCount={processes.length}\n          />\n        </div>\n        <div className=\"mt-4 col-6 col-md-4\">\n          <InsertedDataView\n            memorySize={memorySize}\n            holes={holes}\n            processes={processes}\n            selectedProcessIndex={currentProcessIndex}\n            selectProcess={(processIndex) => {setCurrentProcessIndex(processIndex)}}\n          />\n        </div>\n      </div>\n    </>\n  )\n}\n","import React from 'react';\nimport Main from './Main';\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <div className=\"container mw-94 mb-4\">\n        <Main />\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}