{"version":3,"sources":["components/ModifySegmentForm.js","components/ModifyProcessColumn.js","components/InsertedDataView.js","helpers/constants.js","components/SortedSegmentView.js","core/segment.js","components/SortedProcessesView.js","components/AppContainer.js","components/App.js","index.js"],"names":["Segment","props","useState","segment","name","setName","size","setSize","useEffect","className","htmlFor","id","type","value","onChange","event","target","min","onClick","setSegment","parseInt","removeSelf","ModifyProcessColumn","process","tempProcessName","setTempProcessName","submitProcess","newProcess","segments","updateProcess","setSegments","newSegments","addProcess","disabled","holeCount","removeProcess","processCount","onKeyUp","key","preventDefault","map","index","newSegment","splice","ShowProcesses","listHoles","setListHoles","listProcesses","setListProcesses","holeDivHeight","setHoleDivHeight","processDivHeight","setProcessDivHeight","k","style","cursor","duration","height","holes","hole","processes","selectedProcessIndex","selectProcess","length","FIRST_FIT","BEST_FIT","WORST_FIT","OLD_PROCESS","HOLE","NEW_PROCESS","PROCESS_VIEW_HEIGHT","SortedSegment","position","top","start","width","display","alignItems","justifyContent","fontWeight","text","segmentProcessesAndHoles","memorySize","sortingMethod","holeSegments","oldProcesses","result","forEach","processIndex","push","end","sort","a","b","i","previousSegment","firstSegment","lastSegment","processAllocationResult","segmentAllocationResult","updatedHoles","JSON","parse","stringify","updatedSegments","j","segmentSize","holeSize","bestFitSegmentIndex","bestFitHole","bestFitHoleSize","worstFitSegmentIndex","worstFitHole","worstFitHoleSize","console","log","factor","s","SortedProcesses","setHeight","selectedOption","setSelectedOption","allocationResult","alert","options","label","styles","option","provided","color","menu","marginTop","placeholder","transition","AppContainer","memorySizeInputValue","setMemorySizeInputValue","setMemorySize","holeStartAddress","setHoleStartAddress","setHoleSize","setHoles","setProcesses","currentProcessIndex","setCurrentProcessIndex","autoFocusCallbackRef","useCallback","inputElement","focus","submitMemorySize","parsedMemorySize","isNaN","ref","parsedHoleStart","parsedHoleSize","overlap","_holeStart","_holeSize","newHoles","newProcesses","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.474f926b.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport default function Segment(props) {\n  const [name, setName] = useState(props.segment.name);\n  const [size, setSize] = useState(props.segment.size);\n\n  useEffect(() => {\n    setName(props.segment.name);\n    setSize(props.segment.size);\n  }, [props.segment]);\n\n  return (<>\n    <div className=\"input-group row m-auto mt-3\">\n      <div className=\"col\">\n        <label\n          className=\"form-label mb-0\"\n          htmlFor=\"segment-name\"\n        >\n          Name\n        </label>\n        <input\n          id=\"segment-name\"\n          className=\"form-control\"\n          type=\"text\"\n          value={name}\n          onChange={(event) => {setName(event.target.value)}}\n        />\n      </div>\n      <div className=\"col\">\n        <label\n          className=\"form-label mb-0\"\n          htmlFor=\"segment-size\"\n        >\n          Size\n        </label>\n        <input\n          id=\"segment-size\"\n          className=\"form-control\"\n          type=\"number\"\n          min={1}\n          value={size}\n          onChange={(event) => {setSize(event.target.value)}}\n        />\n      </div>\n    </div>\n    <div className=\"row m-auto p-0\">\n      <div className=\"col input-group justify-content-between\">\n        <button\n          className=\"mt-1 btn btn-success w-80\"\n          onClick={() => {\n            props.setSegment({\n              name,\n              size: parseInt(size)\n            })}}\n        >\n          Save Segment\n        </button>\n        <button\n          className=\"mt-1 btn btn-danger w-20\"\n          onClick={props.removeSelf}\n        >\n          <i className=\"fas fa-trash-alt\"></i>\n        </button>\n      </div>\n    </div>\n  </>)\n}","import React, { useEffect, useState } from 'react';\nimport ModifySegmentForm from './ModifySegmentForm';\n\nexport default function ModifyProcessColumn(props) {\n\n  const [tempProcessName, setTempProcessName] = useState(props.process.name);\n\n  useEffect(() => {}, [props.process]);\n\n  useEffect(() => {\n    setTempProcessName(props.process.name);\n  }, [props.process]);\n\n  const submitProcess = () => {\n    let newProcess = {\n      name: tempProcessName,\n      segments: [...props.process.segments]\n    };\n    props.updateProcess(newProcess);\n  }\n\n  const addNewSegment = () => {\n    let newProcess = {\n      name: tempProcessName,\n      segments: [...props.process.segments, {name: '', size: 0}]\n    };\n    props.updateProcess(newProcess);\n  }\n\n  const setSegments = (newSegments) => {\n    let newProcess = {\n      name: tempProcessName,\n      segments: [...newSegments]\n    };\n    props.updateProcess(newProcess);\n  }\n\n  return (<>\n    <div className=\"h3\">Insert/Modify Process</div>\n    <div className=\"my-4\">\n      <div>\n      <button className=\"mb-3 mx-1 btn btn-primary\" onClick={() => {\n        props.addProcess();\n        // setTempProcessName(props.process.name);\n      }} disabled={props.holeCount < 1}>Add Process</button>\n        <button className=\"mb-3 mx-1 btn btn-danger\" onClick={() => {\n          props.removeProcess();\n          // setTempProcessName(props.process.name);\n        }} disabled={props.processCount <= 1}>Remove Process</button>\n      </div>\n      <label\n        className=\"form-label\"\n        htmlFor=\"process-name\"\n      >\n        Process Name\n      </label>\n      <div className=\"input-group\">\n        <input\n          id=\"process-name\"\n          className=\"form-control\"\n          type=\"text\"\n          value={tempProcessName}\n          onChange={(event) => {setTempProcessName(event.target.value)}}\n          onKeyUp={(event) => {\n            if (event.key === 'Enter') {\n              event.preventDefault();\n              submitProcess();\n            }\n          }}\n          disabled={props.holeCount === 0}\n        />\n        <button\n          className=\"btn btn-success\"\n          onClick={submitProcess}\n          disabled={props.holeCount === 0}\n        >\n          Save\n        </button>\n      </div>\n    </div>\n    <div className=\"mt-4\">\n      <button\n        className=\"btn btn-primary\"\n        onClick={addNewSegment}\n        disabled={props.holeCount === 0}\n      >\n        Add Segment\n      </button>\n    </div>\n    {props.process.segments.map((segment, index) => (<ModifySegmentForm\n      key={index}\n      index={index}\n      segment={segment}\n      setSegment={(newSegment) => {\n        let newSegments = [...props.process.segments];\n        newSegments[index] = newSegment;\n        setSegments(newSegments);\n      }}\n      removeSelf={() => {\n        let newSegments = props.process.segments;\n        newSegments.splice(index, 1);\n        setSegments(newSegments);\n      }}\n    />))}\n  </>)\n}","import React, { useState, useEffect } from 'react';\nimport AnimateHeight from 'react-animate-height';\n\nexport default function ShowProcesses(props) {\n\n  const [listHoles, setListHoles] = useState(true);\n  const [listProcesses, setListProcesses] = useState(true);\n\n  const [holeDivHeight, setHoleDivHeight] = useState('auto');\n  const [processDivHeight, setProcessDivHeight] = useState('auto');\n\n  useEffect(() => {\n    setHoleDivHeight((listHoles === true && 'auto') || 0);\n  }, [listHoles]);\n\n  useEffect(() => {\n    setProcessDivHeight((listProcesses === true && 'auto') || 0);\n  }, [listProcesses]);\n\n  let k = 0;\n  return (<>\n    <div\n      className=\"h6 mt-1\"\n    >\n      Holes <span\n        style={{ cursor: 'pointer' }}\n        onClick={() => {setListHoles(!listHoles)}}\n        className=\"link-primary\"\n      >\n        {(listHoles && '[hide]') || '[show]'}\n      </span>\n    </div>\n    <AnimateHeight\n      duration={500}\n      height={holeDivHeight}\n    >\n      {props.holes.map((hole, index) => (<div key={k++} className=\"border border-1 rounded border-secondary\">\n        <div className=\"row m-0 p-0\">\n          <div className=\"col\">\n            Hole {index}\n          </div>\n        </div>\n        <div className=\"row m-0 p-0 border-top border-1 border-secondary\">\n          <div className=\"col\">\n            Start: {hole[0]}\n          </div>\n          <div className=\"col\">\n            Size: {hole[1]}\n          </div>\n        </div>\n      </div>))}\n    </AnimateHeight>\n    <div\n      className=\"h6 mt-2\"\n    >\n      Processes <span\n        style={{ cursor: 'pointer' }}\n        onClick={() => {setListProcesses(!listProcesses)}}\n        className=\"link-primary\"\n      >\n        {(listProcesses && '[hide]') || '[show]'}\n      </span>\n    </div>\n    <AnimateHeight\n      duration={500}\n      height={processDivHeight}\n    >\n      {props.processes.map((process, index) => (<div\n        key={k++}\n        className={`border border-1 rounded border-secondary ${props.selectedProcessIndex === index && 'bg-warning'}`}\n        onClick={() => {props.selectProcess(index)}}\n        style={{cursor: 'pointer'}}\n      >\n        <div className=\"row m-0 p-0\">\n          <div className=\"col\">\n            {process.name || <div className=\"fs-italic\">Unnamed Process</div>}\n          </div>\n        </div>\n        <div className=\"row m-0 p-0 border-top border-1 border-secondary\">\n          <div className=\"col\">\n            # Segments: {process.segments.length}\n          </div>\n        </div>\n      </div>))}\n    </AnimateHeight>\n  </>)\n}\n\n\n","export const FIRST_FIT = 'FIRST_FIT';\nexport const BEST_FIT = 'BEST_FIT';\nexport const WORST_FIT = 'WORST_FIT';\n\nexport const OLD_PROCESS = 'OLD_PROCESS';\nexport const HOLE = 'HOLE';\nexport const NEW_PROCESS = 'NEW_PROCESS';\n\nexport const PROCESS_VIEW_HEIGHT = 480;\nexport const EXPANDED_PROCESS_VIEW_HEIGHT = 960;","import React from 'react';\nimport {\n  OLD_PROCESS,\n  HOLE,\n  NEW_PROCESS\n} from '../helpers/constants';\n\nexport default function SortedSegment(props) {\n\n  return (\n    <div className={\n        props.type === OLD_PROCESS ? 'bg-warning' :\n        props.type === HOLE ? 'bg-success' :\n        props.type === NEW_PROCESS ? 'bg-primary' : ''\n          +\n        props.index === 0 ? 'rounded-top' : ''\n      } style={{\n        ...props.style,\n        position: 'absolute',\n        top: `${props.start}px`,\n        width: '100%',\n        height: `${props.size}px`,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontWeight: 'bold',\n      }}>\n        {props.text}\n    </div>\n  )\n}","import {\n  FIRST_FIT,\n  BEST_FIT,\n  WORST_FIT,\n  OLD_PROCESS,\n  HOLE,\n  NEW_PROCESS,\n} from '../helpers/constants';\n\nconst segmentProcessesAndHoles = (memorySize, height, processes, holes, sortingMethod) => {\n  let segments = [];\n  let holeSegments = [];\n  let oldProcesses = [];\n  let newSegments = [];\n  let result = [true, []];\n\n  // Create segments\n  processes.forEach((process, processIndex) => {\n    process.segments.forEach((segment) => {\n      segments.push({\n        processIndex: processIndex,\n        name: `${process.name} - ${segment.name}`,\n        size: segment.size\n      });\n    });\n  });\n\n  // Insert holes\n  holes.forEach((hole, index) => {\n    holeSegments.push({\n      type: HOLE,\n      name: `Hole ${index}`,\n      start: hole[0],\n      end: hole[0] + hole[1]\n    });\n  });\n  holeSegments.sort((a, b) => (a.start - b.start));\n\n  // Insert old processes between holes\n  for (let i = 1; i < holeSegments.length; i++) {\n    let previousSegment = holeSegments[i-1];\n    let segment = holeSegments[i];\n    if (segment.start > previousSegment.end) {\n      oldProcesses.push({\n        type: OLD_PROCESS,\n        name: 'Old Process',\n        start: previousSegment.end,\n        end: segment.start\n      });\n    }\n  }\n\n  // Insert old process to the start if first hole doesn't start at 0\n  let firstSegment = holeSegments[0];\n  if (firstSegment && firstSegment.start > 0) {\n    oldProcesses.push({\n      type: OLD_PROCESS,\n      name: 'Old Process',\n      start: 0,\n      end: firstSegment.start\n    });\n  }\n\n  // Add old process to the end if last hole doesn't end at memory size\n  let lastSegment = holeSegments[holeSegments.length - 1];\n  if (lastSegment && lastSegment.end < memorySize) {\n    oldProcesses.push({\n      type: OLD_PROCESS,\n      name: 'Old Process',\n      start: lastSegment.end,\n      end: memorySize\n    });\n  }\n\n  let useFirstFit = () => {\n    for (let i=0; i<processes.length; i++) {\n      let processAllocationResult = true;\n      let segmentAllocationResult = false;\n\n      let updatedHoles = JSON.parse(JSON.stringify(holeSegments));\n      let updatedSegments = JSON.parse(JSON.stringify(newSegments));\n      let process = processes[i];\n\n      for (let j=0; j<process.segments.length; j++) {\n        let segment = process.segments[j];\n        let segmentSize = segment.size;\n        for (let k=0; k<updatedHoles.length; k++) {\n          let hole = updatedHoles[k];\n          let holeSize = hole.end - hole.start;\n          if (segmentSize <= holeSize) {\n            updatedSegments.push({\n              type: NEW_PROCESS,\n              name: `${process.name} - ${segment.name}`,\n              start: hole.start,\n              end: hole.start + segmentSize\n            });\n            if (segmentSize === holeSize) {\n              updatedHoles.splice(k, 1);\n            } else {\n              updatedHoles[k].start += segmentSize;\n            }\n            segmentAllocationResult = true;\n            break;\n          }\n        }\n        if (segmentAllocationResult === false) {\n          processAllocationResult = false;\n          break;\n        }\n      }\n\n      if (processAllocationResult === true) {\n        holeSegments = JSON.parse(JSON.stringify(updatedHoles));\n        newSegments = JSON.parse(JSON.stringify(updatedSegments));\n      } else {\n        result[0] = false;\n      }\n    }\n  }\n\n  let useBestFit = () => {\n    for (let i=0; i<processes.length; i++) {\n      let processAllocationResult = true;\n      let segmentAllocationResult;\n\n      let updatedHoles = JSON.parse(JSON.stringify(holeSegments));\n      let updatedSegments = JSON.parse(JSON.stringify(newSegments));\n      let process = processes[i];\n\n      for (let j=0; j<process.segments.length; j++) {\n        segmentAllocationResult = false;\n        let segment = process.segments[j];\n        let segmentSize = segment.size;\n        let bestFitSegmentIndex = null;\n        for (let k=0; k<updatedHoles.length; k++) {\n          let hole = updatedHoles[k];\n          let holeSize = hole.end - hole.start;\n          if (segmentSize <= holeSize) {\n            if (bestFitSegmentIndex === null) {\n              bestFitSegmentIndex = k;\n              segmentAllocationResult = true;\n              continue;\n            }\n            let bestFitHole = updatedHoles[bestFitSegmentIndex];\n            let bestFitHoleSize = bestFitHole.end - bestFitHole.start;\n            if (holeSize < bestFitHoleSize) {\n              bestFitSegmentIndex = k;\n              segmentAllocationResult = true;\n              continue;\n            }\n          }\n        }\n\n        if (segmentAllocationResult === false) {\n          processAllocationResult = false;\n          break;\n        }\n        let bestFitHole = updatedHoles[bestFitSegmentIndex];\n        let bestFitHoleSize = bestFitHole.end - bestFitHole.start;\n        updatedSegments.push({\n          type: NEW_PROCESS,\n          name: `${process.name} - ${segment.name}`,\n          start: bestFitHole.start,\n          end: bestFitHole.start + segmentSize\n        });\n\n        if (bestFitHoleSize === segmentSize) {\n          updatedHoles.splice(bestFitSegmentIndex, 1);\n        } else if (bestFitHoleSize > segmentSize) {\n          updatedHoles[bestFitSegmentIndex].start += segmentSize;\n        }\n      }\n\n      if (processAllocationResult === true) {\n        holeSegments = JSON.parse(JSON.stringify(updatedHoles));\n        newSegments = JSON.parse(JSON.stringify(updatedSegments));\n      } else {\n        result[0] = false;\n      }\n    }\n  }\n\n  let useWorstFit = () => {\n    for (let i=0; i<processes.length; i++) {\n      let processAllocationResult = true;\n      let segmentAllocationResult;\n\n      let updatedHoles = JSON.parse(JSON.stringify(holeSegments));\n      let updatedSegments = JSON.parse(JSON.stringify(newSegments));\n      let process = processes[i];\n\n      for (let j=0; j<process.segments.length; j++) {\n        segmentAllocationResult = false;\n        let segment = process.segments[j];\n        let segmentSize = segment.size;\n        let worstFitSegmentIndex = null;\n        for (let k=0; k<updatedHoles.length; k++) {\n          let hole = updatedHoles[k];\n          let holeSize = hole.end - hole.start;\n          if (segmentSize <= holeSize) {\n            if (worstFitSegmentIndex === null) {\n              worstFitSegmentIndex = k;\n              segmentAllocationResult = true;\n              continue;\n            }\n            let worstFitHole = updatedHoles[worstFitSegmentIndex];\n            let worstFitHoleSize = worstFitHole.end - worstFitHole.start;\n            if (holeSize > worstFitHoleSize) {\n              worstFitSegmentIndex = k;\n              segmentAllocationResult = true;\n              continue;\n            }\n          }\n        }\n\n        if (segmentAllocationResult === false) {\n          processAllocationResult = false;\n          break;\n        }\n        let worstFitHole = updatedHoles[worstFitSegmentIndex];\n        let worstFitHoleSize = worstFitHole.end - worstFitHole.start;\n        updatedSegments.push({\n          type: NEW_PROCESS,\n          name: `${process.name} - ${segment.name}`,\n          start: worstFitHole.start,\n          end: worstFitHole.start + segmentSize\n        });\n\n        if (worstFitHoleSize === segmentSize) {\n          updatedHoles.splice(worstFitSegmentIndex, 1);\n        } else if (worstFitHoleSize > segmentSize) {\n          updatedHoles[worstFitSegmentIndex].start += segmentSize;\n        }\n      }\n\n      if (processAllocationResult === true) {\n        holeSegments = JSON.parse(JSON.stringify(updatedHoles));\n        newSegments = JSON.parse(JSON.stringify(updatedSegments));\n      } else {\n        result[0] = true;\n      }\n    }\n  }\n\n  let sortingFunctions = {\n    [FIRST_FIT]: useFirstFit,\n    [BEST_FIT]: useBestFit,\n    [WORST_FIT]: useWorstFit\n  }\n\n  sortingFunctions[sortingMethod]();\n\n  console.log(oldProcesses, holeSegments, newSegments);\n\n  let factor = height / memorySize;\n\n  result[1] = [...oldProcesses, ...holeSegments, ...newSegments].map(s => ({\n    ...s,\n    start: s.start * factor,\n    end: s.end * factor\n  }));\n\n  return result;\n}\n\nexport default segmentProcessesAndHoles;","import React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport SortedSegmentView from './SortedSegmentView';\nimport {\n  FIRST_FIT,\n  BEST_FIT,\n  WORST_FIT,\n  PROCESS_VIEW_HEIGHT,\n  EXPANDED_PROCESS_VIEW_HEIGHT\n} from '../helpers/constants';\n\nimport segmentProcessesAndHoles from '../core/segment';\n\nexport default function SortedProcesses(props) {\n\n  const [height, setHeight] = useState(PROCESS_VIEW_HEIGHT);\n\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [segments, setSegments] = useState([]);\n  \n  useEffect(() => {\n    if (selectedOption) {\n      const [allocationResult, newSegments] = segmentProcessesAndHoles(\n        props.memorySize,\n        height,\n        props.processes,\n        props.holes,\n        selectedOption.value\n      );\n      if (allocationResult === false) {\n        alert(`Failed to allocate processes to memory`);\n        return;\n      }\n      setSegments(newSegments);\n    }\n  }, [\n    height,\n    selectedOption,\n    props.memorySize,\n    props.processes,\n    props.holes\n  ]);\n  \n  const handleChange = (selectedOption) => {\n    setSelectedOption(selectedOption);\n  };\n  \n  return (<>\n    <Select\n      value={selectedOption}\n      onChange={handleChange}\n      options={[\n        {value: FIRST_FIT, label: 'First Fit'},\n        {value: BEST_FIT, label: 'Best Fit'},\n        {value: WORST_FIT, label: 'Worst Fit'}\n      ]}\n      styles={{\n        option: (provided) => ({\n          ...provided,\n          color: 'black'\n        }),\n        menu: (provided) => ({\n          ...provided,\n          marginTop: 2\n        })\n      }}\n      placeholder=\"Allocation Method...\"\n    />\n\n    {((selectedOption !== null && segments.length > 0) && <><div className=\"my-2 rounded-top\" style={{\n      position: 'relative',\n      height: `${height}px`,\n      transition: '.5s'\n    }}>\n      {segments.map((segment, i) => (\n        <SortedSegmentView\n          key={i}\n          index={i}\n          type={segment.type}\n          start={segment.start}\n          size={segment.end - segment.start}\n          text={segment.name}\n          style={{transition: '.5s'}}\n        />\n      ))}\n    </div>\n    <div\n      onClick={() => {\n        if (height === PROCESS_VIEW_HEIGHT) {\n          setHeight(EXPANDED_PROCESS_VIEW_HEIGHT);\n        } else {\n          setHeight(PROCESS_VIEW_HEIGHT);\n        }\n      }}\n    >\n      <i\n        style={{width: '100%', cursor: 'pointer'}}\n        className={'fas fa-arrow-' + (height === PROCESS_VIEW_HEIGHT ? 'down' : 'up')}\n      ></i>\n    </div></>)}\n  </>)\n}","import React, { useEffect, useState, useCallback } from 'react';\nimport ModifyProcessColumn from './ModifyProcessColumn';\nimport InsertedDataView from './InsertedDataView';\nimport SortedProcessesView from './SortedProcessesView';\n\nexport default function AppContainer() {\n  \n  const [memorySizeInputValue, setMemorySizeInputValue] = useState('2');\n  const [memorySize, setMemorySize] = useState(0);\n\n  const [holeStartAddress, setHoleStartAddress] = useState('0');\n  const [holeSize, setHoleSize] = useState('1');\n\n  const [holes, setHoles] = useState([]);\n  const [processes, setProcesses] = useState([{name: '', segments: []}]);\n  const [currentProcessIndex, setCurrentProcessIndex] = useState(0);\n\n  const autoFocusCallbackRef = useCallback(inputElement => {\n    if (inputElement) inputElement.focus();\n  }, []);\n  \n  const submitMemorySize = () => {\n    let parsedMemorySize = parseInt(memorySizeInputValue);\n    if (!isNaN(parsedMemorySize)) {\n      setMemorySize(parsedMemorySize);\n    }\n  }\n\n  const submitHole = () => {\n    let parsedHoleStart = parseInt(holeStartAddress);\n    let parsedHoleSize = parseInt(holeSize);\n\n    if (isNaN(parsedHoleStart) || isNaN(parsedHoleSize)) {\n      alert(`You must insert a valid hole parameters`);\n      return false;\n    }\n\n    if (parsedHoleStart + parsedHoleSize > memorySize) {\n      alert(`A hole can't extend outside memory`);\n      return false;\n    }\n\n    let overlap = null;\n    holes.forEach(([_holeStart, _holeSize]) => {\n      let _holeEnd = _holeStart + _holeSize;\n      let holeEnd = parsedHoleStart + parsedHoleSize;\n      if (parsedHoleStart <= _holeStart && holeEnd >= _holeStart) {\n        overlap = [_holeStart, _holeSize];\n      }\n      if (parsedHoleStart >= _holeStart && parsedHoleStart < _holeEnd) {\n        overlap = [_holeStart, _holeSize];\n      }\n    });\n    if (overlap != null) {\n      alert(`Hole overlaps with hole starting at ${overlap[0]} with size ${overlap[1]}`);\n      return false;\n    }\n\n    let hole = [parsedHoleStart, parsedHoleSize];\n    // add the new hole to the holes array\n    let newHoles = [...holes, hole];\n    setHoles(newHoles);\n    // empty the textboxes\n    setHoleStartAddress('');\n    setHoleSize('');\n  }\n\n  const updateCurrentProcess = (newProcess) => {\n    let newProcesses = [...processes];\n    newProcesses[currentProcessIndex] = newProcess;\n    setProcesses(newProcesses);\n  }\n\n  const removeProcess = () => {\n    let newProcesses = [...processes];\n    newProcesses.splice(currentProcessIndex, 1);\n    setProcesses(newProcesses);\n  }\n\n  const addProcess = () => {\n    let newProcesses = [...processes, {name: '', segments: []}];\n    setCurrentProcessIndex(processes.length);\n    setProcesses(newProcesses);\n  }\n\n  useEffect(() => {\n    if (currentProcessIndex >= processes.length) {\n      setCurrentProcessIndex(processes.length - 1);\n    } else if (currentProcessIndex < 0) {\n      setCurrentProcessIndex(0);\n    }\n  }, [processes, currentProcessIndex]);\n\n  if (memorySize === 0) {\n    return (\n      <div className=\"m-4\">\n        <label htmlFor=\"memorySizeInput\" className=\"form-label mb-4 mw-80px\">Memory Size (in bytes)</label>\n        <input\n          id=\"memorySizeInput\"\n          className=\"form-control m-auto mb-4 mw-80px w-60\"\n          type=\"number\" \n          ref={autoFocusCallbackRef}\n          value={memorySizeInputValue}\n          onChange={(event) => {setMemorySizeInputValue(event.target.value)}}\n          onKeyUp={(event) => {\n            if (event.key === 'Enter') {\n              event.preventDefault();\n              submitMemorySize();\n            }\n          }}\n        />\n        <button className=\"btn btn-success\" onClick={submitMemorySize}>\n          Submit\n        </button>\n      </div>\n    )\n  }\n\n  return (\n    <>\n      <div className=\"row m-0 text-center justify-content-center\">\n        <div className=\"mt-4 col-6 col-md-4\">\n          <div className=\"h3\">Insert Hole</div>\n          <div className=\"my-4\">\n            <label\n              className=\"form-label\"\n              htmlFor=\"holeStart\"\n            >\n              Starting Address\n            </label>\n            <input\n              id=\"holeStart\"\n              className=\"form-control\"\n              type=\"number\"\n              min={0}\n              value={holeStartAddress}\n              ref={autoFocusCallbackRef}\n              onChange={(event) => {\n                if (parseInt(event.target.value) < 0) return false;\n                setHoleStartAddress(event.target.value)\n              }}\n            />\n          </div>\n          <div className=\"mb-4\">\n            <label\n              className=\"form-label\"\n              htmlFor=\"holeSize\"\n            >\n              Size\n            </label>\n            <input\n              id=\"holeSize\"\n              className=\"form-control\"\n              type=\"number\"\n              min={1}\n              value={holeSize}\n              onChange={(event) => {\n                if (parseInt(event.target.value) < 1) return false;\n                setHoleSize(event.target.value)\n              }}\n            />\n          </div>\n          <button\n            className=\"btn btn-primary\"\n            onClick={submitHole}\n          >\n            Insert Hole\n          </button>\n        </div>\n        <div className=\"mt-4 col-6 col-md-4\">\n          <ModifyProcessColumn\n            process={(processes[currentProcessIndex] && processes[currentProcessIndex]) || {name: '', segments: []}}\n            addProcess={addProcess}\n            removeProcess={removeProcess}\n            updateProcess={updateCurrentProcess}\n            holeCount={holes.length}\n            processCount={processes.length}\n          />\n        </div>\n        <div className=\"mt-4 col-6 col-md-4\">\n          <div className=\"mb-2\">\n            <InsertedDataView\n              memorySize={memorySize}\n              holes={holes}\n              processes={processes}\n              selectedProcessIndex={currentProcessIndex}\n              selectProcess={(processIndex) => {setCurrentProcessIndex(processIndex)}}\n            />\n          </div>\n          <div className=\"mt-2\">\n            <SortedProcessesView\n              memorySize={memorySize}\n              processes={processes}\n              holes={holes}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n","import React from 'react';\nimport AppContainer from './AppContainer';\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <div className=\"container mw-94 mb-4\">\n        <AppContainer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}