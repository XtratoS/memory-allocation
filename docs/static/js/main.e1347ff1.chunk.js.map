{"version":3,"sources":["components/InsertHoleColumn.js","components/ModifySegmentForm.js","components/ModifyProcessColumn.js","components/InsertedDataView.js","helpers/constants.js","components/SortedSegmentView.js","core/segment.js","components/SortedProcessesView.js","components/AppContainer.js","components/App.js","index.js"],"names":["InsertHoleColumn","props","useState","holeStartAddress","setHoleStartAddress","holeSize","setHoleSize","className","htmlFor","id","type","min","value","ref","autoFocusCallbackRef","onChange","event","parseInt","target","onClick","parsedHoleStart","parsedHoleSize","isNaN","alert","submitHole","squashHoles","Segment","segment","name","setName","size","setSize","useEffect","setSegment","removeSelf","ModifyProcessColumn","process","tempProcessName","setTempProcessName","setSegments","newSegments","newProcess","segments","updateProcess","addProcess","disabled","holeCount","removeProcess","processCount","map","index","newSegment","splice","ShowProcesses","listHoles","setListHoles","listProcesses","setListProcesses","holeDivHeight","setHoleDivHeight","processDivHeight","setProcessDivHeight","k","style","cursor","duration","height","holes","hole","processes","selectedProcessIndex","selectProcess","length","FIRST_FIT","BEST_FIT","WORST_FIT","OLD_PROCESS","HOLE","NEW_PROCESS","PROCESS_VIEW_HEIGHT","SortedSegment","position","top","start","width","display","alignItems","justifyContent","fontWeight","text","backgroundColor","data-tip","right","deallocateSelf","segmentProcessesAndHoles","memorySize","sortingMethod","holeSegments","oldProcesses","result","forEach","processIndex","push","end","sort","a","b","i","previousSegment","unfactoredStart","unfactoredSize","firstSegment","lastSegment","processAllocationResult","segmentAllocationResult","updatedHoles","JSON","parse","stringify","updatedSegments","j","segmentSize","bestFitSegmentIndex","bestFitHole","bestFitHoleSize","worstFitSegmentIndex","worstFitHole","worstFitHoleSize","factor","s","SortedProcesses","setHeight","selectedOption","setSelectedOption","allocationResult","failtures","join","options","label","styles","option","provided","color","menu","marginTop","placeholder","transition","newHole","insertHole","AppContainer","memorySizeInputValue","setMemorySizeInputValue","setMemorySize","setHoles","setProcesses","currentProcessIndex","setCurrentProcessIndex","useCallback","inputElement","focus","newHoles","parsedMemorySize","Math","floor","overlap","_holeStart","_holeSize","totalHoleSize","reduce","accumulator","currentValue","newProcesses","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e1347ff1.chunk.js","sourcesContent":["import React, {  useState } from 'react';\n\nexport default function InsertHoleColumn(props) {\n  const [holeStartAddress, setHoleStartAddress] = useState('0');\n  const [holeSize, setHoleSize] = useState('1');\n\n  const submitHole = () => {\n    let parsedHoleStart = parseInt(holeStartAddress);\n    let parsedHoleSize = parseInt(holeSize);\n\n    if (isNaN(parsedHoleStart) || isNaN(parsedHoleSize)) {\n      alert(`You must insert a valid hole parameters`);\n      return false;\n    }\n    let res = props.submitHole(parsedHoleStart, parsedHoleSize);\n    if (res === true) {\n      setHoleStartAddress('0');\n      setHoleSize('1');\n    }\n  }\n\n  return (<>\n    <div className=\"h4\">Insert Hole</div>\n    <div className=\"my-4\">\n      <label\n        className=\"form-label\"\n        htmlFor=\"holeStart\"\n      >\n        Starting Address\n      </label>\n      <input\n        id=\"holeStart\"\n        className=\"form-control\"\n        type=\"number\"\n        min={0}\n        value={holeStartAddress}\n        ref={props.autoFocusCallbackRef}\n        onChange={(event) => {\n          if (parseInt(event.target.value) < 0) return false;\n          setHoleStartAddress(event.target.value)\n        }}\n      />\n    </div>\n    <div className=\"mb-4\">\n      <label\n        className=\"form-label\"\n        htmlFor=\"holeSize\"\n      >\n        Size\n      </label>\n      <input\n        id=\"holeSize\"\n        className=\"form-control\"\n        type=\"number\"\n        min={1}\n        value={holeSize}\n        onChange={(event) => {\n          if (parseInt(event.target.value) < 1) return false;\n          setHoleSize(event.target.value);\n        }}\n      />\n    </div>\n    <button\n      className=\"btn btn-primary\"\n      onClick={submitHole}\n    >\n      Insert Hole\n    </button>\n    <button\n      className=\"btn btn-success my-4\"\n      onClick={props.squashHoles}\n    >\n      Squash All Holes Together\n    </button>\n  </>)\n}\n","import { useState, useEffect } from 'react';\n\nexport default function Segment(props) {\n  const [name, setName] = useState(props.segment.name);\n  const [size, setSize] = useState(props.segment.size);\n\n  useEffect(() => {\n    setName(props.segment.name);\n    setSize(props.segment.size);\n  }, [props.segment]);\n\n  const saveSegment = () => {\n    if (name === '' || size === '') {\n      alert(`Invalid values for segment parameters`)\n      return;\n    }\n    props.setSegment({\n      name,\n      size: parseInt(size)\n    })\n  }\n\n  return (<>\n    <div className=\"input-group row m-auto mt-3\">\n      <div className=\"col\">\n        <label\n          className=\"form-label mb-0\"\n          htmlFor=\"segment-name\"\n        >\n          Name\n        </label>\n        <input\n          id=\"segment-name\"\n          className=\"form-control\"\n          type=\"text\"\n          value={name}\n          onChange={(event) => {setName(event.target.value)}}\n        />\n      </div>\n      <div className=\"col\">\n        <label\n          className=\"form-label mb-0\"\n          htmlFor=\"segment-size\"\n        >\n          Size\n        </label>\n        <input\n          id=\"segment-size\"\n          className=\"form-control\"\n          type=\"number\"\n          min={1}\n          value={size}\n          onChange={(event) => {setSize(event.target.value)}}\n        />\n      </div>\n    </div>\n    <div className=\"row m-auto p-0\">\n      <div className=\"col input-group justify-content-between\">\n        <button\n          className=\"mt-1 btn btn-success w-80\"\n          onClick={saveSegment}\n        >\n          Save Segment\n        </button>\n        <button\n          className=\"mt-1 btn btn-danger w-20\"\n          onClick={props.removeSelf}\n        >\n          <i className=\"fas fa-trash-alt\"></i>\n        </button>\n      </div>\n    </div>\n  </>)\n}","import React, { useEffect, useState } from 'react';\nimport ModifySegmentForm from './ModifySegmentForm';\n\nexport default function ModifyProcessColumn(props) {\n\n  const [tempProcessName, setTempProcessName] = useState(props.process.name);\n\n  useEffect(() => {}, [props.process]);\n\n  useEffect(() => {\n    setTempProcessName(props.process.name);\n  }, [props.process]);\n\n  const submitProcess = () => {\n    let newProcess = {\n      name: tempProcessName,\n      segments: [...props.process.segments]\n    };\n    props.updateProcess(newProcess);\n  }\n\n  const addNewSegment = () => {\n    let newProcess = {\n      name: tempProcessName,\n      segments: [...props.process.segments, {name: '', size: 0}]\n    };\n    props.updateProcess(newProcess);\n  }\n\n  const setSegments = (newSegments) => {\n    let newProcess = {\n      name: tempProcessName,\n      segments: [...newSegments]\n    };\n    props.updateProcess(newProcess);\n  }\n\n  return (<>\n    <div className=\"h4\">Insert/Modify Process</div>\n    <div className=\"my-4\">\n      <div>\n      <button className=\"mb-3 mx-1 btn btn-primary\" onClick={() => {\n        props.addProcess();\n        // setTempProcessName(props.process.name);\n      }} disabled={props.holeCount < 1}>Add Process</button>\n        <button className=\"mb-3 mx-1 btn btn-danger\" onClick={() => {\n          props.removeProcess();\n          // setTempProcessName(props.process.name);\n        }} disabled={props.processCount <= 1}>Deallocate Process</button>\n      </div>\n      <label\n        className=\"form-label\"\n        htmlFor=\"process-name\"\n      >\n        Process Name\n      </label>\n      <div className=\"input-group\">\n        <input\n          id=\"process-name\"\n          className=\"form-control\"\n          type=\"text\"\n          value={tempProcessName}\n          onChange={(event) => {setTempProcessName(event.target.value)}}\n          disabled={props.holeCount === 0}\n        />\n        <button\n          className=\"btn btn-success\"\n          onClick={submitProcess}\n          disabled={props.holeCount === 0}\n        >\n          Save\n        </button>\n      </div>\n    </div>\n    <div className=\"mt-4\">\n      <button\n        className=\"btn btn-primary\"\n        onClick={addNewSegment}\n        disabled={props.holeCount === 0}\n      >\n        Add Segment\n      </button>\n    </div>\n    {props.process.segments.map((segment, index) => (<ModifySegmentForm\n      key={index}\n      index={index}\n      segment={segment}\n      setSegment={(newSegment) => {\n        let newSegments = [...props.process.segments];\n        newSegments[index] = newSegment;\n        setSegments(newSegments);\n      }}\n      removeSelf={() => {\n        let newSegments = props.process.segments;\n        newSegments.splice(index, 1);\n        setSegments(newSegments);\n      }}\n    />))}\n  </>)\n}","import React, { useState, useEffect } from 'react';\nimport AnimateHeight from 'react-animate-height';\n\nexport default function ShowProcesses(props) {\n\n  const [listHoles, setListHoles] = useState(true);\n  const [listProcesses, setListProcesses] = useState(true);\n\n  const [holeDivHeight, setHoleDivHeight] = useState('auto');\n  const [processDivHeight, setProcessDivHeight] = useState('auto');\n\n  useEffect(() => {\n    setHoleDivHeight((listHoles === true && 'auto') || 0);\n  }, [listHoles]);\n\n  useEffect(() => {\n    setProcessDivHeight((listProcesses === true && 'auto') || 0);\n  }, [listProcesses]);\n\n  let k = 0;\n  return (<>\n    <div\n      className=\"h6 mt-1\"\n    >\n      Holes <span\n        style={{ cursor: 'pointer' }}\n        onClick={() => {setListHoles(!listHoles)}}\n        className=\"link-primary\"\n      >\n        {(listHoles && '[hide]') || '[show]'}\n      </span>\n    </div>\n    <AnimateHeight\n      duration={500}\n      height={holeDivHeight}\n    >\n      {props.holes.map((hole, index) => (<div key={k++} className=\"border border-1 rounded border-secondary\">\n        <div className=\"row m-0 p-0\">\n          <div className=\"col\">\n            Hole {index}\n          </div>\n        </div>\n        <div className=\"row m-0 p-0 border-top border-1 border-secondary\">\n          <div className=\"col\">\n            Start: {hole[0]}\n          </div>\n          <div className=\"col\">\n            Size: {hole[1]}\n          </div>\n        </div>\n      </div>))}\n    </AnimateHeight>\n    <div\n      className=\"h6 mt-2\"\n    >\n      Processes <span\n        style={{ cursor: 'pointer' }}\n        onClick={() => {setListProcesses(!listProcesses)}}\n        className=\"link-primary\"\n      >\n        {(listProcesses && '[hide]') || '[show]'}\n      </span>\n    </div>\n    <AnimateHeight\n      duration={500}\n      height={processDivHeight}\n    >\n      {props.processes.map((process, index) => (<div\n        key={k++}\n        className={`border border-1 rounded border-secondary ${props.selectedProcessIndex === index && 'border-light bg-secondary'}`}\n        onClick={() => {props.selectProcess(index)}}\n        style={{cursor: 'pointer'}}\n      >\n        <div className=\"row m-0 p-0\">\n          <div className=\"col\">\n            {process.name || <div className=\"fs-italic\">Unnamed Process</div>}\n          </div>\n        </div>\n        <div className=\"row m-0 p-0\">\n          <div className=\"col\">\n            {process.segments.length} Segments\n          </div>\n        </div>\n      </div>))}\n    </AnimateHeight>\n  </>)\n}\n\n\n","export const FIRST_FIT = 'FIRST_FIT';\nexport const BEST_FIT = 'BEST_FIT';\nexport const WORST_FIT = 'WORST_FIT';\n\nexport const OLD_PROCESS = 'OLD_PROCESS';\nexport const HOLE = 'HOLE';\nexport const NEW_PROCESS = 'NEW_PROCESS';\n\nexport const PROCESS_VIEW_HEIGHT = 480;\nexport const EXPANDED_PROCESS_VIEW_HEIGHT = 960;","import React from 'react';\nimport ReactTooltip from 'react-tooltip';\nimport {\n  OLD_PROCESS,\n  HOLE,\n  NEW_PROCESS\n} from '../helpers/constants';\n\nexport default function SortedSegment(props) {\n\n  return (\n    <div className={\n        `${'m-0 p-0 row text-center justify-content-center align-items-center '\n        }${props.type === OLD_PROCESS ? ' bg-warning text-dark ' : ''\n        }${props.type === HOLE ? 'bg-success' : ''\n        }${props.type === NEW_PROCESS ? 'bg-primary' : ''}`\n      } style={{\n        ...props.style,\n        position: 'absolute',\n        top: `${props.start}px`,\n        width: '100%',\n        height: `${props.size}px`,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontWeight: 'bold'\n      }}>\n        <div className='col' style={{position: 'relative'}}>\n          <span>{props.text}</span>\n          <ReactTooltip\n            backgroundColor='#dc3545'\n          />\n          {props.type === OLD_PROCESS &&\n            <span\n              data-tip='De-allocate'\n              style={{\n                position: 'absolute',\n                right: 10\n              }}\n              onClick={() => {\n                props.deallocateSelf();\n              }}\n            >\n              <i\n                className='fas fa-minus-circle text-danger'\n              ></i>\n          </span>}\n        </div>\n    </div>\n  )\n}","import {\n  FIRST_FIT,\n  BEST_FIT,\n  WORST_FIT,\n  OLD_PROCESS,\n  HOLE,\n  NEW_PROCESS,\n} from '../helpers/constants';\n\nconst segmentProcessesAndHoles = (memorySize, height, processes, holes, sortingMethod) => {\n  let segments = [];\n  let holeSegments = [];\n  let oldProcesses = [];\n  let newSegments = [];\n  let result = [true, [], []];\n\n  // Create segments\n  processes.forEach((process, processIndex) => {\n    process.segments.forEach((segment) => {\n      segments.push({\n        processIndex: processIndex,\n        name: `${process.name} - ${segment.name}`,\n        size: segment.size\n      });\n    });\n  });\n\n  // Insert holes\n  holes.forEach((hole, index) => {\n    holeSegments.push({\n      type: HOLE,\n      name: `Hole ${index}`,\n      start: hole[0],\n      end: hole[0] + hole[1]\n    });\n  });\n  holeSegments.sort((a, b) => (a.start - b.start));\n\n  // Insert old processes between holes\n  for (let i = 1; i < holeSegments.length; i++) {\n    let previousSegment = holeSegments[i-1];\n    let segment = holeSegments[i];\n    if (segment.start > previousSegment.end) {\n      oldProcesses.push({\n        type: OLD_PROCESS,\n        name: 'Old Process',\n        start: previousSegment.end,\n        end: segment.start,\n        unfactoredStart: previousSegment.end,\n        unfactoredSize: segment.start - previousSegment.end\n      });\n    }\n  }\n\n  // Insert old process to the start if first hole doesn't start at 0\n  let firstSegment = holeSegments[0];\n  if (firstSegment && firstSegment.start > 0) {\n    oldProcesses.push({\n      type: OLD_PROCESS,\n      name: 'Old Process',\n      start: 0,\n      end: firstSegment.start,\n      unfactoredStart: 0,\n      unfactoredSize: firstSegment.start,\n    });\n  }\n\n  // Add old process to the end if last hole doesn't end at memory size\n  let lastSegment = holeSegments[holeSegments.length - 1];\n  if (lastSegment && lastSegment.end < memorySize) {\n    oldProcesses.push({\n      type: OLD_PROCESS,\n      name: 'Old Process',\n      start: lastSegment.end,\n      end: memorySize,\n      unfactoredStart: lastSegment.end,\n      unfactoredSize: memorySize - lastSegment.end,\n    });\n  }\n\n  let useFirstFit = () => {\n    for (let i=0; i<processes.length; i++) {\n      let processAllocationResult = true;\n      let segmentAllocationResult = false;\n\n      let updatedHoles = JSON.parse(JSON.stringify(holeSegments));\n      let updatedSegments = JSON.parse(JSON.stringify(newSegments));\n      let process = processes[i];\n\n      for (let j=0; j<process.segments.length; j++) {\n        segmentAllocationResult = false;\n        let segment = process.segments[j];\n        let segmentSize = segment.size;\n        for (let k=0; k<updatedHoles.length; k++) {\n          let hole = updatedHoles[k];\n          let holeSize = hole.end - hole.start;\n          if (segmentSize <= holeSize) {\n            updatedSegments.push({\n              type: NEW_PROCESS,\n              name: `${process.name} - ${segment.name}`,\n              start: hole.start,\n              end: hole.start + segmentSize\n            });\n            if (segmentSize === holeSize) {\n              updatedHoles.splice(k, 1);\n            } else {\n              updatedHoles[k].start += segmentSize;\n            }\n            segmentAllocationResult = true;\n            break;\n          }\n        }\n\n        if (segmentAllocationResult === false) {\n          processAllocationResult = false;\n          result[2].push(process.name);\n          break;\n        }\n      }\n\n      if (processAllocationResult === true) {\n        holeSegments = JSON.parse(JSON.stringify(updatedHoles));\n        newSegments = JSON.parse(JSON.stringify(updatedSegments));\n      } else {\n        result[0] = false;\n      }\n    }\n  }\n\n  let useBestFit = () => {\n    for (let i=0; i<processes.length; i++) {\n      let processAllocationResult = true;\n      let segmentAllocationResult;\n\n      let updatedHoles = JSON.parse(JSON.stringify(holeSegments));\n      let updatedSegments = JSON.parse(JSON.stringify(newSegments));\n      let process = processes[i];\n\n      for (let j=0; j<process.segments.length; j++) {\n        segmentAllocationResult = false;\n        let segment = process.segments[j];\n        let segmentSize = segment.size;\n        let bestFitSegmentIndex = null;\n        for (let k=0; k<updatedHoles.length; k++) {\n          let hole = updatedHoles[k];\n          let holeSize = hole.end - hole.start;\n          if (segmentSize <= holeSize) {\n            if (bestFitSegmentIndex === null) {\n              bestFitSegmentIndex = k;\n              segmentAllocationResult = true;\n              continue;\n            }\n            let bestFitHole = updatedHoles[bestFitSegmentIndex];\n            let bestFitHoleSize = bestFitHole.end - bestFitHole.start;\n            if (holeSize < bestFitHoleSize) {\n              bestFitSegmentIndex = k;\n              segmentAllocationResult = true;\n              continue;\n            }\n          }\n        }\n\n        if (segmentAllocationResult === false) {\n          processAllocationResult = false;\n          result[2].push(process.name);\n          break;\n        }\n        let bestFitHole = updatedHoles[bestFitSegmentIndex];\n        let bestFitHoleSize = bestFitHole.end - bestFitHole.start;\n        updatedSegments.push({\n          type: NEW_PROCESS,\n          name: `${process.name} - ${segment.name}`,\n          start: bestFitHole.start,\n          end: bestFitHole.start + segmentSize\n        });\n\n        if (bestFitHoleSize === segmentSize) {\n          updatedHoles.splice(bestFitSegmentIndex, 1);\n        } else if (bestFitHoleSize > segmentSize) {\n          updatedHoles[bestFitSegmentIndex].start += segmentSize;\n        }\n      }\n\n      if (processAllocationResult === true) {\n        holeSegments = JSON.parse(JSON.stringify(updatedHoles));\n        newSegments = JSON.parse(JSON.stringify(updatedSegments));\n      } else {\n        result[0] = false;\n      }\n    }\n  }\n\n  let useWorstFit = () => {\n    for (let i=0; i<processes.length; i++) {\n      let processAllocationResult = true;\n      let segmentAllocationResult;\n\n      let updatedHoles = JSON.parse(JSON.stringify(holeSegments));\n      let updatedSegments = JSON.parse(JSON.stringify(newSegments));\n      let process = processes[i];\n\n      for (let j=0; j<process.segments.length; j++) {\n        segmentAllocationResult = false;\n        let segment = process.segments[j];\n        let segmentSize = segment.size;\n        let worstFitSegmentIndex = null;\n        for (let k=0; k<updatedHoles.length; k++) {\n          let hole = updatedHoles[k];\n          let holeSize = hole.end - hole.start;\n          if (segmentSize <= holeSize) {\n            if (worstFitSegmentIndex === null) {\n              worstFitSegmentIndex = k;\n              segmentAllocationResult = true;\n              continue;\n            }\n            let worstFitHole = updatedHoles[worstFitSegmentIndex];\n            let worstFitHoleSize = worstFitHole.end - worstFitHole.start;\n            if (holeSize > worstFitHoleSize) {\n              worstFitSegmentIndex = k;\n              segmentAllocationResult = true;\n              continue;\n            }\n          }\n        }\n\n        if (segmentAllocationResult === false) {\n          processAllocationResult = false;\n          result[2].push(process.name);\n          break;\n        }\n\n        let worstFitHole = updatedHoles[worstFitSegmentIndex];\n        let worstFitHoleSize = worstFitHole.end - worstFitHole.start;\n        updatedSegments.push({\n          type: NEW_PROCESS,\n          name: `${process.name} - ${segment.name}`,\n          start: worstFitHole.start,\n          end: worstFitHole.start + segmentSize\n        });\n\n        if (worstFitHoleSize === segmentSize) {\n          updatedHoles.splice(worstFitSegmentIndex, 1);\n        } else if (worstFitHoleSize > segmentSize) {\n          updatedHoles[worstFitSegmentIndex].start += segmentSize;\n        }\n      }\n\n      if (processAllocationResult === true) {\n        holeSegments = JSON.parse(JSON.stringify(updatedHoles));\n        newSegments = JSON.parse(JSON.stringify(updatedSegments));\n      } else {\n        result[0] = false;\n      }\n    }\n  }\n\n  let sortingFunctions = {\n    [FIRST_FIT]: useFirstFit,\n    [BEST_FIT]: useBestFit,\n    [WORST_FIT]: useWorstFit\n  }\n\n  sortingFunctions[sortingMethod]();\n\n  let factor = height / memorySize;\n\n  result[1] = [...oldProcesses, ...holeSegments, ...newSegments].map(s => ({\n    ...s,\n    start: s.start * factor,\n    end: s.end * factor\n  }));\n\n  return result;\n}\n\nexport default segmentProcessesAndHoles;","import React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport SortedSegmentView from './SortedSegmentView';\nimport {\n  FIRST_FIT,\n  BEST_FIT,\n  WORST_FIT,\n  PROCESS_VIEW_HEIGHT,\n  EXPANDED_PROCESS_VIEW_HEIGHT\n} from '../helpers/constants';\n\nimport segmentProcessesAndHoles from '../core/segment';\n\nexport default function SortedProcesses(props) {\n\n  const [height, setHeight] = useState(PROCESS_VIEW_HEIGHT);\n\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [segments, setSegments] = useState([]);\n  \n  useEffect(() => {\n    if (selectedOption !== null) {\n      const [allocationResult, newSegments, failtures] = segmentProcessesAndHoles(\n        props.memorySize,\n        height,\n        props.processes,\n        props.holes,\n        selectedOption.value\n      );\n      if (allocationResult === false) {\n        alert(`Failed to allocate process(es); ${failtures.join(' ')} to memory`);\n      }\n      setSegments(newSegments);\n    }\n  }, [\n    height,\n    selectedOption,\n    props.memorySize,\n    props.processes,\n    props.holes\n  ]);\n  \n  const handleChange = (selectedOption) => {\n    setSelectedOption(selectedOption);\n  };\n  \n  return (<>\n    <Select\n      value={selectedOption}\n      onChange={handleChange}\n      options={[\n        {value: FIRST_FIT, label: 'First Fit'},\n        {value: BEST_FIT, label: 'Best Fit'},\n        {value: WORST_FIT, label: 'Worst Fit'}\n      ]}\n      styles={{\n        option: (provided) => ({\n          ...provided,\n          color: 'black'\n        }),\n        menu: (provided) => ({\n          ...provided,\n          marginTop: 2\n        })\n      }}\n      placeholder=\"Allocation Method...\"\n    />\n\n    {((selectedOption !== null && segments.length > 0) && <>\n      <div className=\"my-2 rounded-top\" style={{\n        position: 'relative',\n        height: `${height}px`,\n        transition: '.5s'\n      }}>\n        {segments.map((segment, i) => (\n          <SortedSegmentView\n            key={i}\n            index={i}\n            deallocateSelf={() => {\n              let segmentStart = segment.unfactoredStart\n              let segmentSize = segment.unfactoredSize;\n              let newHole = [segmentStart, segmentSize];\n              props.insertHole(newHole);\n            }}\n            type={segment.type}\n            start={segment.start}\n            size={segment.end - segment.start}\n            text={segment.name}\n            style={{transition: '.5s'}}\n          />\n        ))}\n      </div>\n      <div\n        onClick={() => {\n          if (height === PROCESS_VIEW_HEIGHT) {\n            setHeight(EXPANDED_PROCESS_VIEW_HEIGHT);\n          } else {\n            setHeight(PROCESS_VIEW_HEIGHT);\n          }\n        }}\n      >\n        <i\n          style={{width: '100%', cursor: 'pointer'}}\n          className={'fas fa-arrow-' + (height === PROCESS_VIEW_HEIGHT ? 'down' : 'up')}\n        ></i>\n      </div>\n    </>)}\n  </>)\n}","import React, { useEffect, useState, useCallback } from 'react';\nimport ReactTooltip from 'react-tooltip';\nimport InsertHoleColumn from './InsertHoleColumn';\nimport ModifyProcessColumn from './ModifyProcessColumn';\nimport InsertedDataView from './InsertedDataView';\nimport SortedProcessesView from './SortedProcessesView';\n\nexport default function AppContainer() {\n  \n  const [memorySizeInputValue, setMemorySizeInputValue] = useState('2');\n  const [memorySize, setMemorySize] = useState(0);\n\n  const [holes, setHoles] = useState([]);\n  const [processes, setProcesses] = useState([{name: '', segments: []}]);\n  const [currentProcessIndex, setCurrentProcessIndex] = useState(0);\n\n  const autoFocusCallbackRef = useCallback(inputElement => {\n    if (inputElement) inputElement.focus();\n  }, []);\n  \n  const submitMemorySize = () => {\n    let parsedMemorySize = parseInt(memorySizeInputValue);\n    if (!isNaN(parsedMemorySize)) {\n      setMemorySize(parsedMemorySize);\n    }\n  }\n\n  const insertHole = (hole) => {\n    // add the new hole to the holes array\n    let newHoles = [...holes, hole];\n    setHoles(newHoles);\n  }\n\n  const submitHole = (parsedHoleStart, parsedHoleSize) => {\n    \n    if (parsedHoleStart + parsedHoleSize > memorySize) {\n      alert(`A hole can't extend outside memory`);\n      return false;\n    }\n\n    let overlap = null;\n    holes.forEach(([_holeStart, _holeSize]) => {\n      let _holeEnd = _holeStart + _holeSize;\n      let holeEnd = parsedHoleStart + parsedHoleSize;\n      if (parsedHoleStart <= _holeStart && holeEnd >= _holeStart) {\n        overlap = [_holeStart, _holeSize];\n      }\n      if (parsedHoleStart >= _holeStart && parsedHoleStart < _holeEnd) {\n        overlap = [_holeStart, _holeSize];\n      }\n    });\n\n    if (overlap != null) {\n      alert(`Hole overlaps with hole starting at ${overlap[0]} with size ${overlap[1]}`);\n      return false;\n    }\n\n    let hole = [parsedHoleStart, parsedHoleSize];\n\n    insertHole(hole);\n    return true;\n  }\n\n  const squashHoles = () => {\n    if (holes.length < 2) {\n      alert(`The holes are already squashed.`);\n      return;\n    }\n\n    let totalHoleSize = holes.reduce((accumulator, currentValue) => {\n      return accumulator + currentValue[1];\n    }, 0);\n    setHoles([[0, totalHoleSize]]);\n    alert(`Squashed all holes to a single hole of size ${totalHoleSize}`);\n    return;\n  }\n\n  const updateCurrentProcess = (newProcess) => {\n    let newProcesses = [...processes];\n    newProcesses[currentProcessIndex] = newProcess;\n    setProcesses(newProcesses);\n  }\n\n  const removeProcess = () => {\n    let newProcesses = [...processes];\n    newProcesses.splice(currentProcessIndex, 1);\n    setProcesses(newProcesses);\n  }\n\n  const addProcess = () => {\n    let newProcesses = [...processes, {name: '', segments: []}];\n    setCurrentProcessIndex(processes.length);\n    setProcesses(newProcesses);\n  }\n\n  useEffect(() => {\n    if (currentProcessIndex >= processes.length) {\n      setCurrentProcessIndex(processes.length - 1);\n    } else if (currentProcessIndex < 0) {\n      setCurrentProcessIndex(0);\n    }\n  }, [processes, currentProcessIndex]);\n\n  if (memorySize === 0) {\n    return (\n      <div className=\"m-4\">\n        <label htmlFor=\"memorySizeInput\" className=\"form-label mb-4 mw-80px\">\n          Memory Size (in bytes)\n        </label>\n        <input\n          id=\"memorySizeInput\"\n          className=\"form-control m-auto mb-4 mw-80px w-60\"\n          type=\"number\" \n          ref={autoFocusCallbackRef}\n          value={memorySizeInputValue}\n          onChange={(event) => {\n            setMemorySizeInputValue(event.target.value);\n          }}\n        />\n        <button className=\"btn btn-success\" onClick={submitMemorySize}>\n          Submit\n        </button>\n      </div>\n    )\n  }\n\n  return (\n    <>\n      <div className=\"row m-0 text-center justify-content-center\">\n        <div className=\"mt-4 p-0 col-1 d-flex justify-content-center align-items-start\">\n          <ReactTooltip backgroundColor='#dc3545'/>\n          <div data-tip='Memory Size'>\n            <i className=\"fas fa-sd-card\"></i>\n            <br/>\n            {\n            memorySize <= 10000 ? memorySize + ' B' :\n              memorySize <= 10000000 ? Math.floor(memorySize/1024) + ' KB' :\n                memorySize <= 10000000000 ? Math.floor(memorySize/1024/1024) + ' MB' :\n                  Math.floor(memorySize/1024/1024/1024) + ' GB'\n            }\n          </div>\n        </div>\n        <div className=\"mt-4 col-5 col-md-3\">\n          <InsertHoleColumn\n            submitHole={submitHole}\n            squashHoles={squashHoles}\n          />\n        </div>\n        <div className=\"mt-4 col-6 col-md-4\">\n          <ModifyProcessColumn\n            process={(processes[currentProcessIndex] && processes[currentProcessIndex]) || {name: '', segments: []}}\n            addProcess={addProcess}\n            removeProcess={removeProcess}\n            updateProcess={updateCurrentProcess}\n            holeCount={holes.length}\n            processCount={processes.length}\n          />\n        </div>\n        <div className=\"mt-4 col-6 col-md-4\">\n          <div className=\"mb-2\">\n            <InsertedDataView\n              memorySize={memorySize}\n              holes={holes}\n              processes={processes}\n              selectedProcessIndex={currentProcessIndex}\n              selectProcess={(processIndex) => {setCurrentProcessIndex(processIndex)}}\n            />\n          </div>\n          <div className=\"mt-2\">\n            <SortedProcessesView\n              insertHole={insertHole}\n              memorySize={memorySize}\n              processes={processes}\n              holes={holes}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n","import React from 'react';\nimport AppContainer from './AppContainer';\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <div className=\"container mw-94 mb-4\">\n        <AppContainer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}